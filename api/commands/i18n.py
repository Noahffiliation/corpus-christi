import json
import click
import re
import os

from flask.cli import AppGroup
from src import BASE_DIR, db
from src.i18n.models import I18NLocale, I18NKey, I18NValue


def validate_locale(ctx, param, value):
    if not re.fullmatch('[a-z]{2}-[A-Z]{2}', value):
        raise click.BadParameter(
            f"{value} is not a valid locale code. It must be in the form of ab-XY")
    return value


def create_dir(ctx, param, value):
    pardir = os.path.dirname(value.name)
    if pardir:
        os.makedirs(pardir, exist_ok=True)
    return value


def default_target():
    params = click.get_current_context().params
    if 'locale' not in params:
        click.echo(
            "Can't get default target from the specified <locale> parameter")
        raise click.Abort
    locale = params['locale']
    return os.path.join(BASE_DIR, 'i18n', f"{locale}.json")


def tree_to_list(tree, is_leaf=lambda node: isinstance(node, str)):
    result = []

    def tree_to_list_helper(word_map, path=[]):
        for key, val in word_map.items():
            if (is_leaf(val)):
                result.append({'path': path + [key], 'value': val})
            else:
                tree_to_list_helper(val, path + [key])
    tree_to_list_helper(tree)
    return result


def create_i18n_cli(app):
    i18n_cli = AppGroup('i18n', help="Maintain translation entries.")

    @i18n_cli.command('dump')
    @click.argument('locale', callback=validate_locale, metavar="<locale>")
    @click.option('--target',
                  default=default_target,
                  callback=create_dir,
                  type=click.File("w"),
                  help="the destination file to dump values to")
    def export_values(locale, target):
        """ Dump values from the database into a json file.

        <locale>: the locale code of the processed values. E.g. en-US """
        click.echo(f"dumping values into {target.name}")

    @i18n_cli.command('load')
    @click.argument('locale', callback=validate_locale, metavar="<locale>")
    @click.option('--override/--no-override', default=True,
                  help="do not override if value already exists")
    @click.option('--target',
                  default=default_target,
                  type=click.File("r"),
                  help="the source file to load values from")
    def import_values(locale, target, override):
        """ Load values from a json file into the database.

        <locale>: the locale code of the processed values. E.g. en-US """
        locale_name = locale
        click.echo(f"loading values from [{target.name}]")
        tree = json.load(target)

        def is_leaf(node):
            return isinstance(
                node, dict) and 'gloss' in node and isinstance(
                node['gloss'], str)

        entries = tree_to_list(tree, is_leaf=is_leaf)
        locale = db.session.query(I18NLocale).filter_by(code=locale).first()
        if not locale:
            click.echo(
                f"locale [{locale}] does not exist in database, trying to create one")
            locale = I18NLocale(
                code=locale_name,
                desc=f"{locale_name}: auto-generated by flask i18n load command")
            db.session.add(locale)
            db.session.commit()
        for entry in entries:
            key_id = '.'.join(entry['path'])
            key = db.session.query(I18NKey).filter_by(id=key_id).first()
            if not key:
                click.echo(
                    f"key [{key_id}] does not exist in database, trying to create one")
                key = I18NKey(
                    id=key_id,
                    desc=f"{key_id}: auto-generated by flask i18n load command")
                db.session.add(key)
                db.session.commit()
            value = db.session.query(I18NValue).filter_by(
                key_id=key.id, locale_code=locale.code).first()
            if value:
                if override:
                    value.gloss = entry['value']['gloss']
                    value.verified = entry['value']['verified']
                else:
                    continue
            else:
                value = I18NValue(
                    gloss=entry['value']['gloss'],
                    verified=entry['value']['verified'],
                    key_id=key.id,
                    locale_code=locale.code
                )
            db.session.add(value)
            click.echo(f"adding I18NValue [{key_id}: {entry['value']}]")
        db.session.commit()

    app.cli.add_command(i18n_cli)
